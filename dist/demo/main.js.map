{"version":3,"sources":["./projects/demo/src/app/app.component.ts","./projects/demo/src/app/app.component.html","./projects/demo/src/app/app.module.ts","./projects/demo/src/environments/environment.ts","./projects/demo/src/main.ts","./projects/ngx-nomad-form/src/lib/components/button/button.component.ts","./projects/ngx-nomad-form/src/lib/components/button/button.component.html","./projects/ngx-nomad-form/src/lib/components/check-box/check-box.component.ts","./projects/ngx-nomad-form/src/lib/components/check-box/check-box.component.html","./projects/ngx-nomad-form/src/lib/components/date/date.component.html","./projects/ngx-nomad-form/src/lib/components/date/date.component.ts","./projects/ngx-nomad-form/src/lib/components/dynamic-form/dynamic-form.component.ts","./projects/ngx-nomad-form/src/lib/components/dynamic-form/dynamic-form.component.html","./projects/ngx-nomad-form/src/lib/components/index.ts","./projects/ngx-nomad-form/src/lib/components/input/input.component.html","./projects/ngx-nomad-form/src/lib/components/input/input.component.ts","./projects/ngx-nomad-form/src/lib/components/radio/radio.component.html","./projects/ngx-nomad-form/src/lib/components/radio/radio.component.ts","./projects/ngx-nomad-form/src/lib/components/select/select.component.html","./projects/ngx-nomad-form/src/lib/components/select/select.component.ts","./projects/ngx-nomad-form/src/lib/directives/dynamic-field/dynamic-field.directive.ts","./projects/ngx-nomad-form/src/lib/nf-config.ts","./projects/ngx-nomad-form/src/lib/ngx-nomad-form.component.ts","./projects/ngx-nomad-form/src/lib/ngx-nomad-form.module.ts","./projects/ngx-nomad-form/src/lib/ngx-nomad-form.service.ts","./projects/ngx-nomad-form/src/public-api.ts","./projects/demo/$_lazy_route_resources|lazy|groupOptions: {}|namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { FieldConfig } from '@ngx-nomad-form/interfaces/field-config';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'demo';\n\n  fields: FieldConfig[] = [{\n    type: 'input',\n    label: 'Username',\n    inputType: 'text',\n    name: 'name',\n    col: 6,\n    validations: [{\n      name: 'required',\n      validator: Validators.required,\n      message: 'Name Required'\n    }, {\n      name: 'pattern',\n      validator: Validators.pattern('^[a-zA-Z]+$'),\n      message: 'Accept only text'\n    }]\n  }, {\n    type: 'input',\n    label: 'Email Address',\n    inputType: 'email',\n    name: 'email',\n    col: 6,\n    validations: [{\n      name: 'required',\n      validator: Validators.required,\n      message: 'Email Required'\n    }, {\n      name: 'pattern',\n      validator: Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$'),\n      message: 'Invalid email'\n    }]\n  }, {\n    type: 'input',\n    label: 'Password',\n    inputType: 'password',\n    name: 'password',\n    col: 12,\n    validations: [{\n      name: 'required',\n      validator: Validators.required,\n      message: 'Password Required'\n    }]\n  }, {\n    type: 'radiobutton',\n    label: 'Gender',\n    name: 'gender',\n    options: ['Male', 'Female'],\n    value: 'Male',\n    col: 6,\n  }, {\n    type: 'date',\n    label: 'Date of Birth',\n    name: 'dob',\n    col: 12,\n    validations: [{\n      name: 'required',\n      validator: Validators.required,\n      message: 'Date of Birth Required'\n    }]\n  }, {\n    type: 'select',\n    label: 'Country',\n    name: 'country',\n    value: 'Africa',\n    col: 6,\n    options: ['America', 'Africa']\n  }, {\n    type: 'checkbox',\n    label: 'Accept Terms',\n    name: 'term',\n    col: 6,\n    value: true\n  }, {\n    type: 'button',\n    color: 'danger',\n    label: 'Save'\n  }];\n\n  get fieldInput() {\n    return JSON.stringify(this.fields, null, 2);\n  }\n\n  set fieldInput(v) {\n    try{\n    this.fields = JSON.parse(v);}\n    catch(e) {\n      console.log('error occored while you were typing the JSON');\n    };\n  }\n\n  callBack(value: any){\n    console.log(value);\n  }\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 text-center mt-5\">\n      <img src=\"assets/ngx-nomad-form.jpg\" width=\"100\" alt=\"Nomad Form\">\n    </div>\n    <div class=\"col-6\">\n      <textarea class=\"form-control\" rows=\"20\" [(ngModel)]=\"fieldInput\"></textarea>\n    </div>\n    <div class=\"col-6 pt-2\">\n      <nf-form [fields]=\"fields\" (callBack)=\"callBack($event)\"></nf-form>\n    </div>\n  </div>\n</div>\n","import { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { NgxNomadFormModule } from 'projects/ngx-nomad-form/src/public-api';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    NgxNomadFormModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent implements OnInit {\n\n  field!: FieldConfig;\n  group!: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"mt-2 text-center d-grid gap-2 col-6 mx-auto\"  [formGroup]=\"group\">\n  <button type=\"submit\" class=\"btn btn-block\" [ngClass]=\"field?.color ? 'btn-' + field?.color : 'btn-primary'\">{{field.label}}</button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-check-box',\n  templateUrl: './check-box.component.html',\n  styleUrls: ['./check-box.component.css']\n})\nexport class CheckBoxComponent implements OnInit {\n\n  field!: FieldConfig;\n  group!: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"form-check mt-2\" [formGroup]=\"group\">\n  <label class=\"form-check-label\">\n    <input type=\"checkbox\" class=\"form-check-input\" formControlName=\"{{ field.name }}\">\n    {{field.label}}\n  </label>\n</div>\n","<div class=\"form-group\" [formGroup]=\"group\">\n  <label for=\"{{field.name}}\">{{field.label}}</label>\n  <input type=\"date\" class=\"form-control\" formControlName=\"{{ field.name }}\"[placeholder]=\"field.label\" id=\"{{ field.name }}\">\n  <ng-container *ngFor=\"let validation of field.validations;\">\n    <small class=\"form-text text-danger\" *ngIf=\"validate(field.name, validation.name)\">{{validation.message}}</small>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-date',\n  templateUrl: './date.component.html',\n  styleUrls: ['./date.component.css']\n})\nexport class DateComponent implements OnInit {\n\n  field!: FieldConfig;\n  group!: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  validate(field: any, validation: any){\n    const title = this.group.get(field ? field : '');\n    if (title){\n      return title.touched && title.hasError(validation);\n    } else {\n      return null;\n    }\n  }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.css']\n})\nexport class DynamicFormComponent implements OnInit {\n\n  @Input() fields: FieldConfig[] = [];\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() submit: EventEmitter<any> = new EventEmitter<any>();\n  form!: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.form = this.createControl();\n  }\n\n  get value() {return this.form?.value; }\n\n  createControl() {\n    const group = this.fb.group({});\n    this.fields.forEach((field: any) => {\n      if(field.type === 'button'){\n        return;\n      }\n      const control = this.fb.control(\n        field.value,\n        this.bindValidations(field.validations || [])\n      );\n      group.addControl(field.name, control);\n    });\n      return group;\n  }\n\n  bindValidations(validations: any) {\n    if (validations.length > 0) {\n        const validList: any[] = [];\n        validations.forEach((valid: { validator: any}) => {\n          validList.push(valid.validator);\n        });\n      return Validators.compose(validList);\n    }\n    return null;\n  }\n\n  onSubmit(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.form?.valid) {\n      this.submit.emit(this.form.value);\n    } else {\n      this.validateAllFormFields(this.form);\n    }\n  }\n\n  validateAllFormFields(formGroup: any) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control: any = formGroup.get(field);\n      control.markAsTouched({\n        onlySelf: true\n      });\n    });\n  }\n\n}\n","<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\">\n  <ng-template *ngFor=\"let field of fields;\" nf-dynamicField [field]=\"field\" [group]=\"form\">\n  </ng-template>\n</form>\n","export * from './button/button.component';\nexport * from './check-box/check-box.component';\nexport * from './date/date.component';\nexport * from './dynamic-form/dynamic-form.component';\nexport * from './input/input.component';\nexport * from './radio/radio.component';\nexport * from './select/select.component';\n","<div class=\"form-group mt-2\" [formGroup]=\"group\">\n  <label for=\"{{field.name}}\">{{field.label}}</label>\n  <input [type]=\"field.inputType\" class=\"form-control\" formControlName=\"{{ field.name }}\" [placeholder]=\"field.label\" id=\"{{ field.name }}\">\n  <ng-container *ngFor=\"let validation of field.validations;\">\n    <small class=\"form-text text-danger\" *ngIf=\"validate(field.name, validation.name)\">{{validation.message}}</small>\n  </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css']\n})\nexport class InputComponent implements OnInit {\n\n  field!: FieldConfig;\n  group!: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  validate(field: any, validation: any){\n    const title = this.group.get(field ? field : '');\n    if (title){\n      return title.touched && title.hasError(validation);\n    } else {\n      return null;\n    }\n  }\n\n}\n","<div class=\"mt-2\" [formGroup]=\"group\">\n  <label for=\"{{field.name}}\">{{field.label}}</label>\n  <div class=\"form-check\" *ngFor=\"let item of field.options\">\n    <input type=\"radio\" class=\"form-check-input\" formControlName=\"{{ field.name }}\" [value]=\"item\" id=\"{{ field.name }}\">\n    <label class=\"form-check-label\">\n      {{item}}\n    </label>\n  </div>\n</div>\n\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-radio',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.css']\n})\nexport class RadioComponent implements OnInit {\n\n  field!: FieldConfig;\n  group!: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"form-group mt-1\" [formGroup]=\"group\">\n  <label for=\"{{ field.name }}\">{{ field?.label }}</label>\n  <select class=\"form-control\" formControlName=\"{{ field.name }}\" id=\"{{ field.name }}\">\n    <option *ngFor=\"let item of field?.options\" [value]=\"item\">{{item}}</option>\n  </select>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config';\n\n@Component({\n  selector: 'nf-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.css']\n})\nexport class SelectComponent implements OnInit {\n\n  field!: FieldConfig;\n  group!: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { ComponentFactoryResolver,  Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { CheckBoxComponent } from '../../components/check-box/check-box.component';\nimport { DateComponent } from '../../components/date/date.component';\nimport { InputComponent } from '../../components/input/input.component';\nimport { RadioComponent } from '../../components/radio/radio.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport { FieldConfig } from '../../interfaces/field-config';\n\nconst componentMapper: any = {\n  input: InputComponent,\n  button: ButtonComponent,\n  select: SelectComponent,\n  date: DateComponent,\n  radiobutton: RadioComponent,\n  checkbox: CheckBoxComponent\n};\n\n@Directive({\n  selector: '[nf-dynamicField]'\n})\nexport class DynamicFieldDirective implements OnInit {\n\n  @Input() field!: FieldConfig;\n  @Input() group!: FormGroup;\n\n  componentRef: any;\n\n  constructor(private resolver: ComponentFactoryResolver, private container: ViewContainerRef) {}\n\n  ngOnInit() {\n    const factory = this.resolver.resolveComponentFactory(componentMapper[this.field?.type]);\n      this.componentRef = this.container.createComponent(factory);\n      this.componentRef.instance.field = this.field;\n      this.componentRef.instance.group = this.group;\n  }\n\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface NfConfig {\n  appId?: string;\n  env?: any;\n};\n\nexport const NF_CONFIG_TOKEN = new InjectionToken<NfConfig>('NF_CONFIG');\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { DynamicFormComponent } from './components';\nimport { FieldConfig } from './interfaces/field-config';\n\n@Component({\n  selector: 'nf-form',\n  template: `<nf-dynamic-form [fields]=\"fields\" (submit)=\"submit($event)\"></nf-dynamic-form>`,\n  styles: [\n  ]\n})\nexport class NgxNomadFormComponent implements OnInit {\n\n  @ViewChild(DynamicFormComponent) form!: DynamicFormComponent;\n  @Input() fields: FieldConfig[] = [];\n  @Output() callBack: EventEmitter<any> = new EventEmitter<any>();\n\n\n  constructor() {}\n\n  submit(value: any) {\n    this.callBack.emit(value);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NfConfig, NF_CONFIG_TOKEN } from './nf-config';\nimport { NgxNomadFormComponent } from './ngx-nomad-form.component';\nimport { NgxNomadFormService } from './ngx-nomad-form.service';\nimport {\n  SelectComponent,\n  ButtonComponent,\n  InputComponent,\n  DateComponent,\n  RadioComponent,\n  CheckBoxComponent,\n  DynamicFormComponent\n} from './components';\nimport { DynamicFieldDirective } from './directives/dynamic-field/dynamic-field.directive';\n\n\nconst formElements = [\n  InputComponent,\n  ButtonComponent,\n  SelectComponent,\n  DateComponent,\n  RadioComponent,\n  CheckBoxComponent,\n];\n\n\n@NgModule({\n  declarations: [\n    ...formElements,\n    DynamicFormComponent,\n    DynamicFieldDirective,\n    NgxNomadFormComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    ...formElements,\n    NgxNomadFormComponent\n  ],\n  providers: [NgxNomadFormService]\n})\nexport class NgxNomadFormModule {\n  static forRoot(config: NfConfig): ModuleWithProviders<NgxNomadFormModule> {\n    return {\n      ngModule: NgxNomadFormModule,\n      providers: [{ provide: NF_CONFIG_TOKEN, useValue: config }],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { NfConfig, NF_CONFIG_TOKEN } from './nf-config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxNomadFormService {\n\n  constructor(@Optional() @Inject(NF_CONFIG_TOKEN) private readonly config: NfConfig | null) { }\n}\n","export * from './lib/ngx-nomad-form.component';\nexport * from './lib/ngx-nomad-form.module';\n\nexport * from './lib/interfaces/field-config';\nexport * from './lib/interfaces/validator';\nexport * from './lib/directives/dynamic-field/dynamic-field.directive';\nexport * from './lib/components';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 9153;\nmodule.exports = webpackEmptyAsyncContext;"],"sourceRoot":"webpack:///"}